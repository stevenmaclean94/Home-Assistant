esphome:
  name: office
  includes:
    - sen0395.h
  libraries:
    - Sensor
esp8266:
  board: d1_mini

uart:
  baud_rate: 115200
  tx_pin: D2
  rx_pin: D1
  id: uart_bus
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);
# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
  - service: send_command
    variables:
      cmd: string
    then:
      - uart.write: !lambda
                      char buf[128];
                      sprintf(buf, "%s\n", cmd.c_str());
                      std::string s = buf;
                      return std::vector<unsigned char>( s.begin(), s.end() );
                      
  - service: set_output_latency
    variables: 
      detect_latency: float
      disappear_latency: float
    then:
      - uart.write: 'sensorStop'
      - delay: 1s
      - uart.write: !lambda
                      char buf[128];
                      sprintf(buf, "outputLatency -1 %i %i\n", (int)ceil(detect_latency/0.025), (int)ceil(disappear_latency/0.025));
                      std::string s = buf;
                      return std::vector<unsigned char>( s.begin(), s.end() );
      - delay: 1s
      - uart.write: 'saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89'
      - delay: 1s
      - uart.write: 'sensorStart'
      
  - service: set_detection_distances
    variables: 
      min_range: float
      max_range: float
    then:
      - uart.write: 'sensorStop'
      - delay: 1s
      - uart.write: !lambda
                      char buf[128];
                      sprintf(buf, "detRangeCfg -1 %i %i\n", (int)ceil(min_range/0.15), (int)ceil(max_range/0.15));
                      std::string s = buf;
                      return std::vector<unsigned char>( s.begin(), s.end() );
      - delay: 1s
      - uart.write: 'saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89'
      - delay: 1s
      - uart.write: 'sensorStart'
ota:
  password: "a8ce79663b5d68e11a031bbdb21ecacd"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Office Fallback Hotspot"
    password: "97N68r2y2ENV"

captive_portal:

binary_sensor:
  - platform: custom
    lambda: |-
      auto my_sensor = new SEN0395(id(uart_bus));
      App.register_component(my_sensor);
      return {my_sensor->presence_sensor};
  
    binary_sensors:
      name: "Office Serial Presence"
      device_class: motion

  - platform: gpio
    pin: D4
    name: "Office Presence"
    device_class: motion
         