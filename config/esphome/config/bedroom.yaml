esphome:
  name: bedroom
  includes:
    - sen0395.h
      
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0
# Enable Home Assistant API
api:
  services:
  - service: send_command
    variables:
      cmd: string
    then:
      - uart.write: !lambda
                      char buf[128];
                      sprintf(buf, "%s\n", cmd.c_str());
                      std::string s = buf;
                      return std::vector<unsigned char>( s.begin(), s.end() );
                      
  - service: set_output_latency
    variables: 
      detect_latency: float
      disappear_latency: float
    then:
      - uart.write: 'sensorStop'
      - delay: 1s
      - uart.write: !lambda
                      char buf[128];
                      sprintf(buf, "outputLatency -1 %i %i\n", (int)ceil(detect_latency/0.025), (int)ceil(disappear_latency/0.025));
                      std::string s = buf;
                      return std::vector<unsigned char>( s.begin(), s.end() );
      - delay: 1s
      - uart.write: 'saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89'
      - delay: 1s
      - uart.write: 'sensorStart'
      
  - service: set_detection_distances
    variables: 
      min_range: float
      max_range: float
    then:
      - uart.write: 'sensorStop'
      - delay: 1s
      - uart.write: !lambda
                      char buf[128];
                      sprintf(buf, "detRangeCfg -1 %i %i\n", (int)ceil(min_range/0.15), (int)ceil(max_range/0.15));
                      std::string s = buf;
                      return std::vector<unsigned char>( s.begin(), s.end() );
      - delay: 1s
      - uart.write: 'saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89'
      - delay: 1s
      - uart.write: 'sensorStart'
ota:
  password: "3c38aaf894caa7a8c30e0272826c12ab"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bedroom Fallback Hotspot"
    password: "hIMdXbw3NP0K"

captive_portal:

# esp32_touch:
# # Delete this after you are done with the setup process
#   setup_mode: true

uart:
  baud_rate: 115200
  tx_pin: GPIO1
  rx_pin: GPIO3
  id: uart_bus
  
esp32_ble_tracker:
  scan_parameters:
    interval: 100ms
    window: 85ms
    active: false
binary_sensor:
  - platform: custom
    lambda: |-
      auto my_sensor = new SEN0395(id(uart_bus));
      App.register_component(my_sensor);
      return {my_sensor->presence_sensor};
  
    binary_sensors:
      name: "Bedroom Serial Presence"
      device_class: motion
  # - platform: esp32_touch
  #   name: "Top Right"
  #   pin: 14
  #   threshold: 5
  #   id: top_right
  - platform: gpio
    pin: 23
    name: "Bedroom Presence"
    device_class: motion   
sensor: 
  - platform: ble_rssi
    mac_address: DD:34:02:06:B9:D2
    name: "Steven Beacon Bedroom RSSI value"
    id: steven_rssi
  - platform: ble_rssi
    mac_address: DD:34:02:06:BB:1F
    name: "Allison Beacon Bedroom RSSI value"
    id: allison_rssi
  - platform: kalman_combinator
    name: "Steven Beacon Bedroom RSSI Filtered"
    unit_of_measurement: dbm
    process_std_dev: 0.4
    sources:
      - source: steven_rssi
        error: 4
    accuracy_decimals: 2
  - platform: kalman_combinator
    name: "Allison Beacon Bedroom RSSI Filtered"
    unit_of_measurement: dbm
    process_std_dev: 0.4
    sources:
      - source: allison_rssi
        error: 4  
    accuracy_decimals: 2
  - platform: dht
    model: DHT22
    pin: 14
    temperature:
      name: "Bedroom Temperature"
    humidity:
      name: "Bedroom Humidity"
    update_interval: 60s
    
switch:
  - platform: gpio
    pin: 27
    name: "Bedroom DHT Power"